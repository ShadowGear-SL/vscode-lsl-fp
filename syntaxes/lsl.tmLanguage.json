{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LSL",
	"scopeName": "source.lsl",
	"patterns": [
		{
			"include": "#Preprocessor-rule-enabled"
		},
		{
			"include": "#Preprocessor-rule-disabled"
		},
		{
			"include": "#Preprocessor-rule-conditional"
		},
		{
			"include": "#comments"
		},
		{
			"match": "\\b(break|case|continue|default|state|do|else|for|goto|if|return|switch|while)\\b",
			"name": "keyword.control.lsl"
		},
		{
			"include": "#storage_types"
		},
		{
			"match": "\\bk[A-Z]\\w*\\b",
			"name": "constant.other.variable.mac-classic.lsl"
		},
		{
			"match": "\\bg[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.global.mac-classic.lsl"
		},
		{
			"match": "\\bs[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.static.mac-classic.lsl"
		},
		{
			"match": "\\b(TRUE|FALSE)\\b",
			"name": "constant.language.lsl"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#operator_overload"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.diagnostic.$3.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.diagnostic.lsl",
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+\t# define\n((?<id>[a-zA-Z_$][\\w$]*))\t  # macro name\n(?:\n  (\\()\n\t(\n\t  \\s* \\g<id> \\s*\t\t # first argument\n\t  ((,) \\s* \\g<id> \\s*)*  # additional arguments\n\t  (?:\\.\\.\\.)?\t\t\t# varargs ellipsis?\n\t)\n  (\\))\n)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				},
				"3": {
					"name": "entity.name.function.Preprocessor.lsl"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.lsl"
				},
				"6": {
					"name": "variable.parameter.Preprocessor.lsl"
				},
				"8": {
					"name": "punctuation.separator.parameters.lsl"
				},
				"9": {
					"name": "punctuation.definition.parameters.end.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"patterns": [
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.include.lsl",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.include.lsl"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.other.lt-gt.include.lsl"
				}
			]
		},
		{
			"begin": "^\\s*(?:((#)\\s*undef))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.undef.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.Preprocessor.lsl",
			"patterns": [
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.Preprocessor.lsl"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"match": "\\b([A-Za-z0-9_]+_t)\\b",
			"name": "support.type.posix-reserved.lsl"
		},
		{
			"include": "#block"
		},
		{
			"include": "#parens"
		},
		{
			"begin": "(?!(?:while|for|do|if|else|goto|switch|catch|return|break|case|continue|default|state|float|integer|key|list|rotation|string|vector|TRUE|FALSE|if|elif|else|endif|ifdef|ifndef|define|undef|include|error|warning)\\s*\\()(?=[a-zA-Z_][a-zA-Z0-9_]*\\s*\\()",
			"end": "(?<=\\))",
			"name": "meta.function.lsl",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"name": "meta.bracket.square.access.lsl",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.lsl"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.lsl"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		{
			"name": "storage.modifier.array.bracket.square.lsl",
			"match": "\\[\\s*\\]"
		},
		{
			"match": ";",
			"name": "punctuation.terminator.statement.lsl"
		},
		{
			"match": ",",
			"name": "punctuation.separator.delimiter.lsl"
		}
	],
	"repository": {
		"probably_a_parameter": {
			"match": "(?:([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?==)|(?<=(?:[a-zA-Z0-9_]\\s|[&*>\\]\\)]))\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\))))",
			"captures": {
				"1": {
					"name": "variable.parameter.probably.defaulted.lsl"
				},
				"2": {
					"name": "variable.parameter.probably.lsl"
				}
			}
		},
		"operator_overload": {
			"begin": "((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:<(?:[\\s<>,\\w])*>\\s*)?::)*)(operator)((?:\\s*(?:\\+\\+|\\-\\-|\\(\\)|\\[\\]|\\->|\\+\\+|\\-\\-|\\+|\\-|!|~|\\*|&|\\->\\*|\\*|\\/|%|\\+|\\-|<<|>>|<=>|<|<=|>|>=|==|!=|&|\\^|\\||&&|\\|\\||=|\\+=|\\-=|\\*=|\\/=|%=|<<=|>>=|&=|\\^=|\\|=|,)|\\s+(?:(?:new|new\\[\\]|delete|delete\\[\\])|[a-zA-Z_][a-zA-Z0-9_]*)))\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.scope.lsl"
				},
				"2": {
					"name": "entity.name.operator.overload.lsl"
				},
				"3": {
					"name": "entity.name.operator.overloadee.lsl"
				},
				"4": {
					"name": "punctuation.section.parameters.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parameters.end.bracket.round.lsl"
				}
			},
			"name": "meta.function.definition.parameters.operator-overload.lsl",
			"patterns": [
				{
					"include": "#probably_a_parameter"
				},
				{
					"include": "#function-innards"
				}
			]
		},
		"access-method": {
			"name": "meta.function-call.member.lsl",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.separator.dot-access.lsl"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.lsl"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.lsl"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.lsl"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z_0-9]*",
							"name": "variable.object.lsl"
						},
						{
							"name": "everything.else",
							"match": ".+"
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.lsl"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.lsl"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"access-member": {
			"name": "variable.object.access.lsl",
			"match": "(?:([a-zA-Z_][a-zA-Z0-9_]*)|(?<=\\]|\\)))\\s*(?:((?:\\.|\\.\\*))|((?:->|->\\*)))\\s*((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:\\.|->)\\s*)*)\\b(?!(?:float|integer|key|list|rotation|string|vector))([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\()",
			"captures": {
				"1": {
					"name": "variable.object.lsl"
				},
				"2": {
					"name": "punctuation.separator.dot-access.lsl"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.lsl"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.lsl"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.lsl"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z0-9_]*",
							"name": "variable.object.lsl"
						},
						{
							"match": ".+",
							"name": "everything.else"
						}
					]
				},
				"5": {
					"name": "variable.other.member.lsl"
				}
			}
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"name": "meta.block.lsl",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#Preprocessor-rule-enabled-block"
				},
				{
					"include": "#Preprocessor-rule-disabled-block"
				},
				{
					"include": "#Preprocessor-rule-conditional-block"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#c_function_call"
				},
				{
					"name": "meta.initialization.lsl",
					"begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+()  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "variable.other.lsl"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$base"
				}
			]
		},
		"c_function_call": {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.lsl",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.lsl"
						}
					},
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
					"name": "comment.block.lsl"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.lsl"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.lsl"
						}
					},
					"name": "comment.block.lsl"
				},
				{
					"match": "\\*/.*\\n",
					"name": "invalid.illegal.stray-comment-end.lsl"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.lsl"
						}
					},
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
					"name": "comment.line.banner.cpp"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.lsl"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.lsl"
				}
			]
		},
		"parens": {
			"name": "punctuation.section.parens",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"parens-block": {
			"name": "punctuation.section.parens.block",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?<!:):(?!:)",
					"name": "punctuation.range-based.cpp"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.lsl"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.lsl"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.lsl"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.lsl"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.lsl"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.lsl"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.lsl"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.lsl"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.lsl"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.lsl"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.lsl"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"end": ":",
					"applyEndPatternLast": 1,
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"patterns": [
						{
							"include": "#access-method"
						},
						{
							"include": "#access-member"
						},
						{
							"include": "#c_function_call"
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.lsl"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.lsl"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
					"name": "constant.other.placeholder.lsl"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.lsl"
						}
					}
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "(?<![a-zA-Z0-9_])(?:float|integer|key|list|rotation|string|vector)(?![a-zA-Z0-9_])",
					"name": "storage.type.built-in.primitive.lsl"
				}
			]
		},
		"vararg_ellipses": {
			"match": "(?<!\\.)\\.\\.\\.(?!\\.)",
			"name": "punctuation.vararg-ellipses.lsl"
		},
		"Preprocessor-rule-conditional": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#Preprocessor-rule-enabled-elif"
						},
						{
							"include": "#Preprocessor-rule-enabled-else"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.lsl"
						}
					}
				}
			]
		},
		"Preprocessor-rule-conditional-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#Preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#Preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"match": "^\\s*#\\s*(else|elif|endif)\\b",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.lsl"
						}
					}
				}
			]
		},
		"Preprocessor-rule-conditional-line": {
			"patterns": [
				{
					"match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
					"name": "keyword.control.directive.conditional.lsl"
				},
				{
					"match": "\\bdefined\\b",
					"name": "invalid.illegal.macro-name.lsl"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#operators"
				},
				{
					"match": "\\b(TRUE|FALSE)\\b",
					"name": "constant.language.lsl"
				},
				{
					"match": "[a-zA-Z_$][\\w$]*",
					"name": "entity.name.function.Preprocessor.lsl"
				},
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#Preprocessor-rule-enabled-elif"
						},
						{
							"include": "#Preprocessor-rule-enabled-else"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.Preprocessor.lsl",
									"patterns": [
										{
											"include": "#Preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#Preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#Preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#Preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.Preprocessor.lsl",
									"patterns": [
										{
											"include": "#Preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "#block_innards"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-disabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
					"contentName": "comment.block.Preprocessor.elif-branch.lsl",
					"patterns": [
						{
							"include": "#disabled"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						},
						"3": {
							"name": "constant.numeric.Preprocessor.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.else-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "$base"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.Preprocessor.lsl"
						},
						"1": {
							"name": "keyword.control.directive.conditional.lsl"
						},
						"2": {
							"name": "punctuation.definition.directive.lsl"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.Preprocessor.lsl",
							"patterns": [
								{
									"include": "#Preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.else-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.if-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "#block_innards"
								}
							]
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-elif-block": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.Preprocessor.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.in-block.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.Preprocessor.lsl"
								},
								"1": {
									"name": "keyword.control.directive.conditional.lsl"
								},
								"2": {
									"name": "punctuation.definition.directive.lsl"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.Preprocessor.elif-branch.lsl",
							"patterns": [
								{
									"include": "#disabled"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"Preprocessor-rule-enabled-else": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"Preprocessor-rule-enabled-else-block": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.Preprocessor.lsl"
				},
				"1": {
					"name": "keyword.control.directive.conditional.lsl"
				},
				"2": {
					"name": "punctuation.definition.directive.lsl"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"Preprocessor-rule-define-line-contents": {
			"patterns": [
				{
					"include": "#vararg_ellipses"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"name": "meta.block.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-blocks"
						}
					]
				},
				{
					"match": "\\(",
					"name": "punctuation.section.parens.begin.bracket.round.lsl"
				},
				{
					"match": "\\)",
					"name": "punctuation.section.parens.end.bracket.round.lsl"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|float|integer|key|list|rotation|string|vector)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
					"end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
					"name": "meta.function.lsl",
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.lsl"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.lsl"
						}
					},
					"name": "string.quoted.double.lsl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "$base"
				}
			]
		},
		"Preprocessor-rule-define-line-blocks": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.lsl"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-blocks"
						},
						{
							"include": "#Preprocessor-rule-define-line-contents"
						}
					]
				},
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		"Preprocessor-rule-define-line-functions": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.lsl"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.arguments.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#Preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"include": "#Preprocessor-rule-define-line-contents"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"name": "meta.function.definition.parameters",
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#probably_a_parameter"
						},
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$base"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#access-method"
				},
				{
					"include": "#access-member"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lsl"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.lsl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.lsl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		}
	}
}